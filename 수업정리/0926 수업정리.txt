함수원형
함수의 이름, 매개변수, 반환형을 함수가 정의되기 전에 미리 한번 써주는것.

int square(int);
int get_integer(void):
매개변수의 이름은 생략하여도 된다.

함수 원형이 없다면 컴파일러는 square 함수가 어떤 매개 변수를 가지는 함수인지 반환형은 무엇인지를 전혀 알 수 없다. 
함수 원형이 미리 주어짐으로서 유형이 일치하지 않을 시 오류 메세지를 출력한다.

함수 호출시 인수 전달 방법

call by value
변수의 값을 매개변수에 복사함.
매개변수를 변경한다고 해서 원본 변수에 영향을 주지 않아 안정성이 있다.

call by reference
참조자(&)를 이용하여 변수에 또 하나의 별명을 붙여 참조에 의한 호출을 구현.
int var = 10;
int &ref = var;
ref = 20; // var의 값이 20으로 바뀐다.

int main(){
    int a=2, b=3;

    modify(a, b);

    return 0;
}

void modify(int& x, int &y){ //x는 a의 별명, y는 b의 별명 x, y의 값을 바꾸면 a, b의 값이 바뀐다.
    x = x * 2;
    y = y * 2;
}

중복함수
동일한 이름의 함수를 여러 개 정의하는것.

매개변수의 타입이 다를 경우 같은 이름의 함수가 여러개 존재하더라도 컴파일러는 이 둘을 충분히 구분할 수 있다.

매개변수의 개수, 타입, 순서를 시그니처(signature)라고 한다. 중복 함수는 이름은 같지만 시그니처는 달라야한다.

int main(){
    square(10);

    square(2.0);
}

int square(int i){ //정수값을 제곱하는 함수
    return i*i;
}

double square(double i){ //실수값을 제곱하는 함수
    return i*i; 
}

디폴트 인수
매개 변수에 인수를 전달하지 않아도 디폴드값을 대신 넣어주는 기능

void display(char c, int n){
    for (int i = 0 ; i < n ; i++){
        cout << c;
    }
    cout << endl;
}

위의 display 함수에 인수가 전달되지 않으면 매개변수 c는 '*'라고 가정하고 매개 변수 n 은 10이라고 가정하는 코드는 다음과 같다.

void display(char c = '*', int n = 10){
    for (int i = 0 ; i < n ; i++){
        cout << c;
    }
    cout << endl;
}

int main(){
    cout << "아무런 인수가 전달되지 않는 경우:\n";
    display();

    cout << " \n첫번째 인수만 전달되는 경우:\n";
    display('#');

    cout << "\n 모든 인수가 전달되는 경우:\n";
    display('#', 5);
}

디폴트 인수 사용시 주의점
디폴트 인수는 반드시 마지막 인수이어야 한다.
int print( double dvalue = 0.0, int prec ); // 오류이다. 첫번째 인수인 dvalue에 0.0이라는 디폴트 값을 입력해두어 오류가 발생한다.

문자열의 결합
문자열을 선언 할 경우 메모리 공간 40 byte를 차지함.

산술 연산자 + 를 연산자 오버로딩을 통해 문자열과 문자열을 더하는데 사용할 수 있다.
=을 사용해 대입하는것도 가능하다.

연산자 오버로딩은 string 클래스 안에 정의되어 있다.

비교 연산자를 통해 문자열간의 대소비교가 가능하다.

문자열 객체 배열
string list[] = {"철수" "영희" "길동"};
문자열 객체로도 배열을 만들 수 있음.

158페이지 레포트
162페이지 10번 12번 13번 usb